name: Microservices CI/CD with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 20s
      
      rabbitmq:
        image: rabbitmq:3.8-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 40s

    strategy:
      fail-fast: false
      matrix:
        include:
          - service: auth
            port: 3000
          - service: product
            port: 3001
          - service: order
            port: 3002
          - service: api-gateway
            port: 3003
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json

    - name: Install dependencies (include devDependencies)
      working-directory: ./${{ matrix.service }}
      run: |
        echo "Installing dependencies for ${{ matrix.service }}"
        npm ci --include=dev || npm ci
        echo "Dependencies installed successfully"

    - name: Install test dependencies
      working-directory: ./${{ matrix.service }}
      run: |
        echo "Installing test dependencies for ${{ matrix.service }}"
        npm install -D chai chai-http mocha @types/chai @types/mocha

    - name: Ensure mocha is available for tests
      working-directory: ./${{ matrix.service }}
      run: |
        # Some environments don't install devDependencies; ensure mocha binary is available.
        if [ -f package.json ]; then
          if ! npm ls mocha >/dev/null 2>&1; then
            echo "mocha not found in node_modules — installing mocha locally"
            npm install mocha --no-save
          else
            echo "mocha present"
          fi
        else
          echo "No package.json found; skipping mocha check"
        fi

    - name: Check service status
      run: |
        echo "=== Checking MongoDB ==="
        echo "MongoDB ports:"
        ss -ltn | grep 27017 || true
        echo "MongoDB status:"
        docker exec $(docker ps -q -f name=mongo) mongosh --eval "db.runCommand({ ping: 1 })" || true
        
        echo -e "\n=== Checking RabbitMQ ==="
        echo "RabbitMQ ports:"
        ss -ltn | grep 5672 || true
        ss -ltn | grep 15672 || true
        echo "RabbitMQ status:"
        docker exec $(docker ps -q -f name=rabbitmq) rabbitmqctl status || true
        
        echo -e "\n=== Docker Status ==="
        docker ps
        
        # Verify connections work
        echo -e "\n=== Testing Connections ==="
        # Test MongoDB connection through Docker
        timeout 30 bash -c '
        until docker exec $(docker ps -q -f name=mongo) mongosh --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; do 
          echo "Waiting for MongoDB..."
          sleep 2
        done'
        echo "✓ MongoDB accepting connections"
        
        # Test RabbitMQ connection through Docker
        timeout 30 bash -c '
        until docker exec $(docker ps -q -f name=rabbitmq) rabbitmqctl ping >/dev/null 2>&1; do
          echo "Waiting for RabbitMQ..."
          sleep 2
        done'
        echo "✓ RabbitMQ accepting connections"

    - name: Verify MongoDB is ready
      run: |
        echo "Waiting for MongoDB to accept connections..."
        timeout=30
        while ! mongosh --eval "db.runCommand({ping: 1})" --quiet; do
          sleep 1
          timeout=$((timeout - 1))
          if [ $timeout -le 0 ]; then
            echo "Timed out waiting for MongoDB"
            exit 1
          fi
        done
        echo "MongoDB is ready"
        
    - name: Verify RabbitMQ is ready
      run: |
        echo "Waiting for RabbitMQ to accept connections..."
        timeout=60
        while ! curl -s -u guest:guest http://localhost:15672/api/aliveness-test/%2F | grep -q "ok"; do
          sleep 2
          timeout=$((timeout - 2))
          if [ $timeout -le 0 ]; then
            echo "Timed out waiting for RabbitMQ"
            exit 1
          fi
        done
        echo "RabbitMQ is ready"
        
        # Create test exchange and queues
        curl -s -u guest:guest -X PUT http://localhost:15672/api/exchanges/%2F/test_exchange
        curl -s -u guest:guest -X PUT http://localhost:15672/api/queues/%2F/test_queue
        
    - name: Run tests
      working-directory: ./${{ matrix.service }}
      env:
        NODE_ENV: test
        DEBUG: "app:*"
        MONGODB_URL: "mongodb://localhost:27017/test"
        RABBITMQ_URL: "amqp://guest:guest@localhost:5672"
        TEST_MODE: "true"
      run: |
        echo "=== Running tests for ${{ matrix.service }} ==="
        echo "Environment:"
        echo "- NODE_ENV: $NODE_ENV"
        echo "- MONGODB_URL: $MONGODB_URL"
        echo "- RABBITMQ_URL: $RABBITMQ_URL"
        
        # Run tests with increased timeouts and retries
        ./node_modules/.bin/mocha \
          --timeout 30000 \
          --retries 2 \
          --require ./test/setup.js \
          --exit \
          src/test/**/*.test.js
    - name: Build
      working-directory: ./${{ matrix.service }}
      run: npm run build --if-present

  docker-build-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [auth, order, product, api-gateway]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd:${{ github.sha }}

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}    # ✅ SỬA DÒNG NÀY
        password: ${{ secrets.DOCKER_PASSWORD }}    # ✅ SỬA DÒNG NÀY

    - name: Create production compose file
      run: |
        cat > docker-compose.prod.yml << EOF
        version: "3.9"
        services:
          auth:
            image: ${{ secrets.DOCKER_USERNAME }}/auth-cicd:latest
            container_name: 'auth-cicd'
            ports:
              - "3000:3000"
            networks:
              - cicd-network

          rabbitmq:
            image: rabbitmq:3.8-management-alpine
            container_name: 'rabbitmq-cicd'
            ports:
              - "5672:5672"
              - "15672:15672"
            volumes:
              - rabbitmq_data:/var/lib/rabbitmq/
            networks:
              - cicd-network

          order:
            image: ${{ secrets.DOCKER_USERNAME }}/order-cicd:latest
            container_name: 'order-cicd'
            ports:
              - "3002:3002"
            depends_on:
              - rabbitmq
            environment:
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network

          product:
            image: ${{ secrets.DOCKER_USERNAME }}/product-cicd:latest
            container_name: 'product-cicd'
            ports:
              - "3001:3001"
            depends_on:
              - rabbitmq
            environment:
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network

          api-gateway:
            image: ${{ secrets.DOCKER_USERNAME }}/api-gateway-cicd:latest
            container_name: 'gateway-cicd'
            ports:
              - "3003:3003"
            environment:
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network

          mongo:
            image: mongo:6
            container_name: 'mongodb-cicd'
            ports:
              - "27017:27017"
            volumes:
              - mongo_data:/data/db
            networks:
              - cicd-network

        networks:
          cicd-network:
            driver: bridge

        volumes:
          mongo_data:
          rabbitmq_data:
        EOF
    - name: Ensure Docker is running
      run: docker info
    - name: Pull và start services
      run: |
        docker compose -f docker-compose.prod.yml pull
        docker compose -f docker-compose.prod.yml up -d
        sleep 20
        docker compose -f docker-compose.prod.yml ps

    - name: Test services
      run: |
        curl -f http://localhost:3003 || echo "Gateway OK"
        curl -f http://localhost:3000 || echo "Auth OK"
        curl -f http://localhost:3001 || echo "Product OK"
        curl -f http://localhost:3002 || echo "Order OK"

    - name: Cleanup
      if: always()
      run: docker compose -f docker-compose.prod.yml down