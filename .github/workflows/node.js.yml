name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:

  # ==============================
  # 1Ô∏è‚É£ Test tr√™n MongoDB local
  # ==============================
  test:
    name: Unit Tests (Mongo local)
    runs-on: ubuntu-latest

    # D√πng services ƒë·ªÉ c√≥ MongoDB (v√† RabbitMQ n·∫øu product c·∫ßn connect)
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017            # MongoDB nghe ·ªü localhost:27017 trong runner
        # N·∫øu kh√¥ng c·∫ßn auth cho test, kh√¥ng set username/password
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

      rabbitmq:
        image: rabbitmq:3-management # product g·ªçi app.setupMessageBroker() -> c·∫ßn amqp://localhost:5672
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'        # ho·∫∑c '20' t√πy project

      # T·∫°o .env cho t·ª´ng service (tr·ªè v·ªÅ Mongo local)
      - name: Create .env for services
        run: |
          # AUTH
          mkdir -p auth
          cat > auth/.env << 'EOF'
          MONGODB_AUTH_URI=mongodb://127.0.0.1:27017/auth_test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          # (t√πy code auth c·∫ßn th√™m g√¨ th√¨ b·ªï sung)
          EOF

          # PRODUCT
          mkdir -p product
          cat > product/.env << 'EOF'
          MONGODB_PRODUCT_URI=mongodb://127.0.0.1:27017/product_test
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          # RABBITMQ_URL n·∫øu code product ƒë·ªçc t·ª´ env (kh·ªõp v·ªõi app.setupMessageBroker())
          RABBITMQ_URL=amqp://127.0.0.1:5672
          EOF

      # C√†i deps & ch·∫°y test cho AUTH tr∆∞·ªõc
      - name: Install & Test (auth)
        working-directory: ./auth
        env:
          # M·ªôt s·ªë lib native c·∫ßn build tools; n·∫øu c·∫ßn c√≥ th·ªÉ th√™m:
          # npm_config_build_from_source: true
          NODE_ENV: test
        run: |
          npm ci
          npm i -D chai@4.3.10 chai-http@4.4.0 mocha@10.3.0
          # Ch·∫°y test auth: file test b·∫°n ƒë∆∞a s·∫Ω connect Mongo local, start app, register/login,...
          npm test

      # Kh·ªüi ch·∫°y AUTH ·ªü n·ªÅn ƒë·ªÉ PRODUCT test c√≥ th·ªÉ g·ªçi http://localhost:3000/login
      - name: Start auth server (background)
        working-directory: ./auth
        env:
          NODE_ENV: test
        run: |
          nohup npm start >/tmp/auth.log 2>&1 &
          # ch·ªù port 3000 s·∫µn s√†ng
          timeout 60 bash -c 'until echo > /dev/tcp/127.0.0.1/3000; do sleep 1; done'
          echo "Auth is up"
          # (t√πy app c√≥ /health th√¨ c√≥ th·ªÉ d√πng curl http://localhost:3000/health)

      # C√†i deps & ch·∫°y test cho PRODUCT (s·∫Ω xin token t·ª´ AUTH v·ª´a ch·∫°y)
      - name: Install & Test (product)
        working-directory: ./product
        env:
          NODE_ENV: test
          LOGIN_TEST_USER: ${{ secrets.LOGIN_TEST_USER }}              # d√πng trong b√†i test
          LOGIN_TEST_PASSWORD: ${{ secrets.LOGIN_TEST_PASSWORD }}
        run: |
          npm ci
          npm i -D chai@4.3.10 chai-http@4.4.0 mocha@10.3.0
          npm test

  # ==============================
  # 2Ô∏è‚É£ Build & Push Docker Images
  # ==============================
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test                         # üîí Ch·ªâ build/push khi test pass
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}                     # Th∆∞ m·ª•c service
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64                  # build multi-arch

  # ==============================
  # 3Ô∏è‚É£ Deploy tr√™n Windows Runner
  # ==============================
  deploy:
    name: Deploy on Localhost (Windows Runner)
    needs: build-and-push
    runs-on: self-hosted          # Windows self-hosted runner
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}  # ‚ö†Ô∏è d√πng bi·∫øn n√†y b√™n d∆∞·ªõi
    steps:
      - name: Check Docker environment
        shell: cmd
        run: |
          echo Checking Docker environment...
          docker --version
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Stop and remove old containers
        shell: cmd
        run: |
          echo Stopping old containers...
          cd /d D:\Tai_Lieu_IUH\Tailieu_Nam4_HK1\L·∫≠p tr√¨nh h∆∞·ªõng d·ªãch v·ª•\TH7_EProject-Phase-1\EProject-Phase-1-TestGithubAction
          docker-compose down --remove-orphans
