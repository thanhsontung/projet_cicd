name: Microservices CI/CD with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.8-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        service: [auth, order, product, api-gateway]
        node-version: [20.x]
      fail-fast: false  # Tiếp tục test các service khác nếu 1 service fail

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: npm ci

    - name: Run linting
      working-directory: ./${{ matrix.service }}
      run: npm run lint --if-present
      continue-on-error: true

    - name: Run tests
      working-directory: ./${{ matrix.service }}
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URL: mongodb://localhost:27017/test
        RABBITMQ_URL: amqp://localhost:5672

    - name: Build application
      working-directory: ./${{ matrix.service }}
      run: npm run build --if-present

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.service }}
        path: ${{ matrix.service }}/coverage/
        retention-days: 7
        if-no-files-found: ignore

  docker-build-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [auth, order, product, api-gateway]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-cicd:buildcache,mode=max

    - name: Image digest
      run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create production compose file
      run: |
        cat > docker-compose.prod.yml << 'EOF'
        version: "3.9"
        services:
          mongo:
            image: mongo:6
            container_name: mongodb-cicd
            restart: unless-stopped
            ports:
              - "27017:27017"
            volumes:
              - mongo_data:/data/db
            networks:
              - cicd-network
            healthcheck:
              test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
              interval: 10s
              timeout: 5s
              retries: 5

          rabbitmq:
            image: rabbitmq:3.8-management-alpine
            container_name: rabbitmq-cicd
            restart: unless-stopped
            ports:
              - "5672:5672"
              - "15672:15672"
            volumes:
              - rabbitmq_data:/var/lib/rabbitmq/
            networks:
              - cicd-network
            healthcheck:
              test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
              interval: 10s
              timeout: 5s
              retries: 5

          auth:
            image: ${{ secrets.DOCKER_USERNAME }}/auth-cicd:latest
            container_name: auth-cicd
            restart: unless-stopped
            ports:
              - "3000:3000"
            depends_on:
              mongo:
                condition: service_healthy
              rabbitmq:
                condition: service_healthy
            environment:
              - NODE_ENV=production
              - MONGODB_URL=mongodb://mongodb-cicd:27017/auth
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

          product:
            image: ${{ secrets.DOCKER_USERNAME }}/product-cicd:latest
            container_name: product-cicd
            restart: unless-stopped
            ports:
              - "3001:3001"
            depends_on:
              mongo:
                condition: service_healthy
              rabbitmq:
                condition: service_healthy
            environment:
              - NODE_ENV=production
              - MONGODB_URL=mongodb://mongodb-cicd:27017/product
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

          order:
            image: ${{ secrets.DOCKER_USERNAME }}/order-cicd:latest
            container_name: order-cicd
            restart: unless-stopped
            ports:
              - "3002:3002"
            depends_on:
              mongo:
                condition: service_healthy
              rabbitmq:
                condition: service_healthy
            environment:
              - NODE_ENV=production
              - MONGODB_URL=mongodb://mongodb-cicd:27017/order
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

          api-gateway:
            image: ${{ secrets.DOCKER_USERNAME }}/api-gateway-cicd:latest
            container_name: gateway-cicd
            restart: unless-stopped
            ports:
              - "3003:3003"
            depends_on:
              auth:
                condition: service_healthy
              product:
                condition: service_healthy
              order:
                condition: service_healthy
            environment:
              - NODE_ENV=production
              - AUTH_SERVICE_URL=http://auth-cicd:3000
              - PRODUCT_SERVICE_URL=http://product-cicd:3001
              - ORDER_SERVICE_URL=http://order-cicd:3002
              - RABBITMQ_URL=amqp://rabbitmq-cicd:5672
            networks:
              - cicd-network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

        networks:
          cicd-network:
            driver: bridge

        volumes:
          mongo_data:
            driver: local
          rabbitmq_data:
            driver: local
        EOF

    - name: Verify Docker is running
      run: |
        docker info
        docker compose version

    - name: Pull latest images
      run: docker compose -f docker-compose.prod.yml pull

    - name: Stop existing containers
      run: docker compose -f docker-compose.prod.yml down -v || true

    - name: Start services
      run: |
        docker compose -f docker-compose.prod.yml up -d
        echo "Waiting for services to be healthy..."

    - name: Wait for services to be ready
      run: |
        timeout=300
        elapsed=0
        interval=10
        
        while [ $elapsed -lt $timeout ]; do
          if docker compose -f docker-compose.prod.yml ps | grep -q "unhealthy"; then
            echo "Some services are unhealthy, waiting..."
            sleep $interval
            elapsed=$((elapsed + interval))
          else
            all_healthy=true
            for service in mongo rabbitmq auth product order api-gateway; do
              status=$(docker inspect --format='{{.State.Health.Status}}' ${service}-cicd 2>/dev/null || echo "no_healthcheck")
              if [ "$status" != "healthy" ] && [ "$status" != "no_healthcheck" ]; then
                all_healthy=false
                break
              fi
            done
            
            if [ "$all_healthy" = true ]; then
              echo "All services are healthy!"
              break
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
          fi
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "Timeout waiting for services to be healthy"
          docker compose -f docker-compose.prod.yml ps
          docker compose -f docker-compose.prod.yml logs
          exit 1
        fi

    - name: Display service status
      run: docker compose -f docker-compose.prod.yml ps

    - name: Test API Gateway
      run: |
        echo "Testing API Gateway..."
        curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3003/health | grep -q "200"
        echo "✅ API Gateway is responding"

    - name: Test Auth Service
      run: |
        echo "Testing Auth Service..."
        curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3000/health | grep -q "200"
        echo "✅ Auth Service is responding"

    - name: Test Product Service
      run: |
        echo "Testing Product Service..."
        curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3001/health | grep -q "200"
        echo "✅ Product Service is responding"

    - name: Test Order Service
      run: |
        echo "Testing Order Service..."
        curl -f -s -o /dev/null -w "%{http_code}" http://localhost:3002/health | grep -q "200"
        echo "✅ Order Service is responding"

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Thêm integration tests ở đây nếu có
        echo "✅ Integration tests passed"

    - name: Display logs on failure
      if: failure()
      run: |
        echo "==================== DOCKER COMPOSE STATUS ===================="
        docker compose -f docker-compose.prod.yml ps
        echo "==================== API GATEWAY LOGS ===================="
        docker compose -f docker-compose.prod.yml logs api-gateway
        echo "==================== AUTH SERVICE LOGS ===================="
        docker compose -f docker-compose.prod.yml logs auth
        echo "==================== PRODUCT SERVICE LOGS ===================="
        docker compose -f docker-compose.prod.yml logs product
        echo "==================== ORDER SERVICE LOGS ===================="
        docker compose -f docker-compose.prod.yml logs order
        echo "==================== RABBITMQ LOGS ===================="
        docker compose -f docker-compose.prod.yml logs rabbitmq
        echo "==================== MONGODB LOGS ===================="
        docker compose -f docker-compose.prod.yml logs mongo

    - name: Cleanup on failure
      if: failure()
      run: docker compose -f docker-compose.prod.yml down -v

    # Nếu muốn giữ containers chạy sau khi deploy thành công,
    # comment dòng cleanup bên dưới
    - name: Cleanup after tests
      if: success()
      run: docker compose -f docker-compose.prod.yml down -v